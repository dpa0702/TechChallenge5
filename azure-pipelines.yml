# Universal Windows Platform
# Build a Universal Windows Platform project using Visual Studio.
# Add steps that test and distribute an app, save build artifacts, and more:
# https://aka.ms/yaml

trigger:
- master

pool:
  vmImage: 'windows-latest'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  appxPackageDir: '$(build.artifactStagingDirectory)\AppxPackages\\'
  defaultWorkingDirectory : 'D:/a'

steps:
- task: UseDotNet@2
  inputs:
    packageType: 'sdk'
    version: '8.0.x'  # Use a versão do .NET Core que você está utilizando
    installationPath: $(Agent.ToolsDirectory)/dotnet
    
- task: NuGetToolInstaller@1

- task: NuGetCommand@2
  inputs:
    restoreSolution: '$(solution)'

- task: DotNetCoreCLI@2
  inputs:
    command: 'build'
    projects: '$(solution)'
    arguments: '--configuration $(buildConfiguration)'

- task: DotNetCoreCLI@2
  inputs:
    command: 'test'
    projects: '$(solution)'
    arguments: '--configuration $(buildConfiguration) --no-build --collect "XPlat Code Coverage" --logger "trx;LogFileName=test_results.trx"'
  continueOnError: true
  
# Adicionando um passo para listar os arquivos no diretório de trabalho e subdiretórios
- script: |
    echo "Listando todos os arquivos no diretório de trabalho e subdiretórios"
    ls -R $(defaultWorkingDirectory)
  displayName: 'Listar todos os arquivos no diretório de trabalho'

- script: |
    echo "##vso[task.setvariable variable=CoverageOutputDir]$(defaultWorkingDirectory)
  displayName: 'Set coverage output directory'

- task: PublishTestResults@2
  inputs:
    testRunner: 'VSTest'
    testResultsFiles: '$(defaultWorkingDirectory)/**/*.trx'
    searchFolder: '$(defaultWorkingDirectory)'
    testRunTitle: 'Test Results'

- task: PublishPipelineArtifact@1
  inputs:
    targetPath: '$(CoverageOutputDir)'
    artifact: 'TestResults'
    publishLocation: 'pipeline'

- task: PublishCodeCoverageResults@2
  inputs:
    codeCoverageTool: 'cobertura'
    summaryFileLocation: '$(CoverageOutputDir)/**/*.cobertura.xml'
    reportDirectory: '$(CoverageOutputDir)/CodeCoverageReport'
    failIfCoverageEmpty: true